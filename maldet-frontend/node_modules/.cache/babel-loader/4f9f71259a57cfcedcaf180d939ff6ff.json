{"ast":null,"code":"import * as axios from 'axios';\n\nconst FileDownload = require('js-file-download');\n\nconst baseUrl = 'http://10.33.100.113:8004';\nexport const searchData = async (data, callback) => {\n  const search_mode = data.search_mode;\n  const url = search_mode === 'hash' || search_mode === 'dynamic_search' ? baseUrl + '/search/' + data.input_data : baseUrl + '/search/' + data.search_mode;\n\n  if (search_mode === 'hash') {\n    axios(url, {\n      method: 'GET',\n      headers: {\n        'dynamic_search': '',\n        'search_ip': '',\n        'date_date': ''\n      }\n    }).then(resp => callback(resp.data)).catch(err => callback(err));\n  } else if (search_mode === 'date') {\n    axios(url, {\n      method: 'GET',\n      headers: {\n        'dynamic_search': '',\n        'search_ip': '',\n        'date_date': data.input_data\n      }\n    }).then(resp => callback(resp.data)).catch(err => callback(err));\n  } else if (search_mode === 'search_ip') {\n    axios(url, {\n      method: 'GET',\n      headers: {\n        'dynamic_search': '',\n        'search_ip': data.input_data,\n        'date_date': ''\n      }\n    }).then(resp => callback(resp.data)).catch(err => callback(err));\n  } // done\n  else if (search_mode === 'dynamic_search') {\n      axios(url, {\n        method: 'GET',\n        headers: {\n          'dynamic_search': 'True',\n          'responseType': 'arraybuffer',\n          'Content-Type': \"application/octet-stream\",\n          'Content-Disposition': \"attachment;filename=result.zip\"\n        }\n      }).then(resp => {\n        FileDownload(resp.data, 'result.zip');\n        callback('Отчет успешно скачан');\n      }).catch(err => callback(err));\n    }\n};\nexport const uploadFile = (mode, fileToUpload, data, callback) => {\n  const requestMode = mode === 'mode1' ? '1' : '2';\n  const url = `${baseUrl}/files/${fileToUpload.name}/${requestMode}`;\n  axios.post(url, data, {\n    headers: {\n      \"Content-Type\": \"multiform/data\",\n      'dynamic_search': '',\n      'search_ip': '',\n      'date_date': '',\n      'IP': '127.0.0.1'\n    }\n  }).then(res => {\n    if (requestMode === '1') callback(res.data);else {\n      // console.log('resp.data', res.data);\n      FileDownload(res.data, `${fileToUpload.name}__result.zip`, \"application/octet-stream\"); // res.data.pipe(fs.createWriteStream('result.zip'))\n\n      callback('Отчет успешно скачан');\n    }\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["/home/cuckoo/MalDet/maldet-frontend/maldet-frontend/src/requests/index.js"],"names":["axios","FileDownload","require","baseUrl","searchData","data","callback","search_mode","url","input_data","method","headers","then","resp","catch","err","uploadFile","mode","fileToUpload","requestMode","name","post","res","console","log"],"mappings":"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","sourcesContent":["import * as axios from 'axios';\n\nconst FileDownload = require('js-file-download');\n\nconst baseUrl = 'http://10.33.100.113:8004';\n\n\nexport const searchData = async (data, callback) => {\n    const search_mode = data.search_mode;\n\n    const url = search_mode === 'hash' || search_mode === 'dynamic_search'\n        ? baseUrl + '/search/' + data.input_data\n        : baseUrl + '/search/' + data.search_mode;\n\n    if (search_mode === 'hash') {\n        axios(url, {\n            method: 'GET',\n            headers: {\n                'dynamic_search': '',\n                'search_ip': '',\n                'date_date': ''\n            }\n        })\n            .then(resp => callback(resp.data))\n            .catch(err => callback(err))\n    }\n\n    else if (search_mode === 'date') {\n        axios(url, {\n            method: 'GET',\n            headers: {\n                'dynamic_search': '',\n                'search_ip': '',\n                'date_date': data.input_data\n            }\n        })\n            .then(resp => callback(resp.data))\n            .catch(err => callback(err));\n    }\n\n    else if (search_mode === 'search_ip') {\n        axios(url, {\n            method: 'GET',\n            headers: {\n                'dynamic_search': '',\n                'search_ip': data.input_data,\n                'date_date': ''\n            }\n        })\n            .then(resp => callback(resp.data))\n            .catch(err => callback(err));\n    }\n\n    // done\n    else if (search_mode === 'dynamic_search') {\n        axios(url, {\n            method: 'GET',\n            headers: {\n                'dynamic_search': 'True',\n                'responseType': 'arraybuffer',\n                'Content-Type': \"application/octet-stream\",\n                'Content-Disposition': \"attachment;filename=result.zip\"\n            }\n        })\n            .then(resp => {\n                FileDownload(resp.data, 'result.zip');\n                callback('Отчет успешно скачан');\n            })\n            .catch(err => callback(err));\n    }\n};\n\n\nexport const uploadFile = (mode, fileToUpload, data, callback) => {\n    const requestMode = mode === 'mode1' ? '1' : '2';\n    const url = `${baseUrl}/files/${fileToUpload.name}/${requestMode}`;\n    \n    \n    axios.post(url, data, {\n        headers: {\n            \"Content-Type\": \"multiform/data\",\n            'dynamic_search': '',\n            'search_ip': '',\n            'date_date': '',\n            'IP': '127.0.0.1'\n        }\n        \n    })\n        .then(res => {\n            if (requestMode === '1')\n                callback(res.data)\n            else {\n                // console.log('resp.data', res.data);\n                FileDownload(res.data, `${fileToUpload.name}__result.zip`, \"application/octet-stream\");\n                // res.data.pipe(fs.createWriteStream('result.zip'))\n                callback('Отчет успешно скачан');\n            }\n        })\n        .catch(err => console.log(err));\n};\n"]},"metadata":{},"sourceType":"module"}