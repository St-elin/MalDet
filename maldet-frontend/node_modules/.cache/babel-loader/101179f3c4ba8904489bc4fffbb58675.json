{"ast":null,"code":"import * as axios from 'axios';\n\nconst FileDownload = require('js-file-download');\n\nconst baseUrl = 'http://0.0.0.0:8003';\nconst stub_analysed_data = {\n  'date': '28 April 2021',\n  'imphash': '8eeaa9499666119d13b3f44ecd77a729',\n  'name': 'calc.exe',\n  'possible matches': '[<здесь вложенная структура внутри которой тоже возможны массивы>]',\n  'probability': 0.999,\n  'sha1': 'ed13af4a0a754b8daee4929134d2ff15ebe053cd',\n  'source_ip': '10.5.40.18',\n  'ssdeep': '384:Otj8FKzuRxmeWCJxhd2WS/YWyiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiLiiiB:QXif4CbPQ7',\n  'type': 'benign'\n};\nexport const searchData = async (data, callback) => {\n  const search_mode = data.search_mode;\n  const url = search_mode === 'hash' || search_mode === 'dynamic_search' ? baseUrl + '/search/' + data.input_data : baseUrl + '/search/' + data.search_mode;\n\n  if (search_mode === 'hash') {\n    axios(url, {\n      method: 'GET',\n      headers: {\n        'dynamic_search': '',\n        'search_ip': '',\n        'date_date': ''\n      }\n    }).then(resp => callback(resp.data)).catch(err => callback(err));\n  } else if (search_mode === 'date') {\n    axios(url, {\n      method: 'GET',\n      headers: {\n        'dynamic_search': '',\n        'search_ip': '',\n        'date_date': data.input_data\n      }\n    }).then(resp => callback(resp.data)).catch(err => callback(err));\n  } else if (search_mode === 'search_ip') {\n    axios(url, {\n      method: 'GET',\n      headers: {\n        'dynamic_search': '',\n        'search_ip': data.input_data,\n        'date_date': ''\n      }\n    }).then(resp => callback(resp.data)).catch(err => callback(err));\n  } // done\n  else if (search_mode === 'dynamic_search') {\n      axios(url, {\n        method: 'GET',\n        headers: {\n          'dynamic_search': 'True',\n          'responseType': 'arraybuffer',\n          'Content-Type': \"application/octet-stream\",\n          'Content-Disposition': \"attachment;filename=result.zip\"\n        }\n      }).then(resp => {\n        FileDownload(resp.data, 'result.zip');\n        callback('ФАЙЛ УСПЕШНО СКАЧАН');\n      }).catch(err => callback(err));\n    }\n};\nexport const uploadFile = (mode, fileToUpload, callback) => {\n  const requestMode = mode === 'mode1' ? '1' : '2';\n  const url = `${baseUrl}/files/${fileToUpload.name}/${requestMode}`;\n  const formData = new FormData();\n  formData.append(fileToUpload.name, fileToUpload);\n  axios(url, formData, {\n    method: 'POST',\n    headers: {\n      'dynamic_search': '',\n      'search_ip': '',\n      'date_date': ''\n    }\n  }).then(() => callback()).catch(err => console.log(err));\n};\nexport const analyzeFile = (mode, fileToAnalyze, callback) => {\n  const url = `${baseUrl}/analysis/${mode}`;\n  callback(stub_analysed_data);\n};","map":{"version":3,"sources":["/Users/damir/Desktop/own/polas/maldet-frontend/src/requests/index.js"],"names":["axios","FileDownload","require","baseUrl","stub_analysed_data","searchData","data","callback","search_mode","url","input_data","method","headers","then","resp","catch","err","uploadFile","mode","fileToUpload","requestMode","name","formData","FormData","append","console","log","analyzeFile","fileToAnalyze"],"mappings":"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","sourcesContent":["import * as axios from 'axios';\n\nconst FileDownload = require('js-file-download');\n\nconst baseUrl = 'http://0.0.0.0:8003';\n\nconst stub_analysed_data = {\n    'date': '28 April 2021',\n    'imphash': '8eeaa9499666119d13b3f44ecd77a729',\n    'name': 'calc.exe',\n    'possible matches': '[<здесь вложенная структура внутри которой тоже возможны массивы>]',\n    'probability': 0.999,\n    'sha1': 'ed13af4a0a754b8daee4929134d2ff15ebe053cd',\n    'source_ip': '10.5.40.18',\n    'ssdeep': '384:Otj8FKzuRxmeWCJxhd2WS/YWyiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiLiiiB:QXif4CbPQ7',\n    'type': 'benign'\n};\n\nexport const searchData = async (data, callback) => {\n    const search_mode = data.search_mode;\n\n    const url = search_mode === 'hash' || search_mode === 'dynamic_search'\n        ? baseUrl + '/search/' + data.input_data\n        : baseUrl + '/search/' + data.search_mode;\n\n    if (search_mode === 'hash') {\n        axios(url, {\n            method: 'GET',\n            headers: {\n                'dynamic_search': '',\n                'search_ip': '',\n                'date_date': ''\n            }\n        })\n            .then(resp => callback(resp.data))\n            .catch(err => callback(err))\n    }\n\n    else if (search_mode === 'date') {\n        axios(url, {\n            method: 'GET',\n            headers: {\n                'dynamic_search': '',\n                'search_ip': '',\n                'date_date': data.input_data\n            }\n        })\n            .then(resp => callback(resp.data))\n            .catch(err => callback(err));\n    }\n\n    else if (search_mode === 'search_ip') {\n        axios(url, {\n            method: 'GET',\n            headers: {\n                'dynamic_search': '',\n                'search_ip': data.input_data,\n                'date_date': ''\n            }\n        })\n            .then(resp => callback(resp.data))\n            .catch(err => callback(err));\n    }\n\n    // done\n    else if (search_mode === 'dynamic_search') {\n        axios(url, {\n            method: 'GET',\n            headers: {\n                'dynamic_search': 'True',\n                'responseType': 'arraybuffer',\n                'Content-Type': \"application/octet-stream\",\n                'Content-Disposition': \"attachment;filename=result.zip\"\n            }\n        })\n            .then(resp => {\n                FileDownload(resp.data, 'result.zip');\n                callback('ФАЙЛ УСПЕШНО СКАЧАН');\n            })\n            .catch(err => callback(err));\n    }\n};\n\n\nexport const uploadFile = (mode, fileToUpload, callback) => {\n    const requestMode = mode === 'mode1' ? '1' : '2';\n    const url = `${baseUrl}/files/${fileToUpload.name}/${requestMode}`;\n\n    const formData = new FormData();\n    formData.append(fileToUpload.name, fileToUpload);\n\n    axios(url, formData, {\n        method: 'POST',\n        headers: {\n            'dynamic_search': '',\n            'search_ip': '',\n            'date_date': ''\n        }\n    })\n        .then(() => callback())\n        .catch(err => console.log(err));\n};\n\nexport const analyzeFile = (mode, fileToAnalyze, callback) => {\n    const url = `${baseUrl}/analysis/${mode}`;\n\n    callback(stub_analysed_data);\n};"]},"metadata":{},"sourceType":"module"}